---
---
<section id="contact" class="section bg-gray-50 dark:bg-gray-800/50">
  <div class="container-custom mx-auto px-4 md:px-16">
    <div class="grid md:grid-cols-2 gap-12">
      {/* Left Column: Contact Info (No changes) */}
      <div class="slide-up">
        <span class="inline-block px-4 py-1 rounded-full bg-secondary-100 dark:bg-secondary-900 text-secondary-600 dark:text-secondary-300 font-medium text-sm mb-4">
          Get In Touch
        </span>
        <h2 class="mb-6 text-gray-900 dark:text-white">We'd Love to Hear From You</h2>
        <p class="text-gray-600 dark:text-gray-300 mb-8">
          Have questions about automating your home? Reach out to our team for expert advice, personalized quotes, or to schedule a demo.
        </p>
        <div class="space-y-6">
           {/* Email Info */}
          <div class="flex items-start">
            <div class="shrink-0 mt-1">
              <svg class="w-6 h-6 text-secondary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Email Us</h3>
              <p class="text-gray-600 dark:text-gray-300">contact@fosslink.in</p>
            </div>
          </div>
           {/* Call Info */}
          <div class="flex items-start">
            <div class="shrink-0 mt-1">
              <svg class="w-6 h-6 text-secondary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Call Us</h3>
              <p class="text-gray-600 dark:text-gray-300">+91 7383896029</p>
            </div>
          </div>
           {/* Address Info (Commented Out) */}
          {/* ... */}
        </div>
      </div>

      {/* Right Column: Form */}
      <div class="slide-up" style="animation-delay: 150ms">
        <div class="card p-6 border border-gray-200 dark:border-gray-700">
          <h3 class="text-xl font-semibold mb-6 text-gray-900 dark:text-white">Send Us a Message</h3>

          {/* --- ALPINE.JS FORM LOGIC UPDATED HERE --- */}
          <form
            x-data="{
              name: '',
              email: '',
              message: '',
              submitting: false, // Added for loading state
              submitted: false, // Keeps track of successful submission
              submitError: null, // Added for showing general errors
              errors: {},      // Keeps track of validation errors

              // The main submission function
              submitForm() {
                this.errors = {}; // Clear validation errors
                this.submitError = null; // Clear general submit error
                this.submitted = false; // Reset success state

                // --- Client-side Validation ---
                if (!this.name) this.errors.name = 'Please enter your name';
                if (!this.email) {
                  this.errors.email = 'Please enter your email';
                } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.email)) {
                  // Basic email format check
                  this.errors.email = 'Please enter a valid email';
                }
                if (!this.message) this.errors.message = 'Please enter your message';

                // If there are validation errors, stop the submission
                if (Object.keys(this.errors).length > 0) {
                  return;
                }

                // --- Start API Submission ---
                this.submitting = true; // Show loading state

                fetch('/api/contact', { // Send POST request to your Astro API endpoint
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                  },
                  body: JSON.stringify({
                    name: this.name,
                    email: this.email,
                    message: this.message,
                  }),
                })
                .then(response => {
                   // Check if the response status is OK (e.g., 200)
                  if (!response.ok) {
                    // If not OK, try to parse the error message from the response JSON
                    return response.json().then(errData => {
                      // Throw an error that includes the message from the API
                       throw new Error(errData.message || `Server responded with status: ${response.status}`);
                    });
                  }
                   // If response is OK, parse the success JSON (though we mainly care about the OK status)
                  return response.json();
                })
                .then(data => {
                  // SUCCESS!
                  this.submitted = true; // Set flag to show success message
                  // Optionally clear the form fields:
                  // this.name = '';
                  // this.email = '';
                  // this.message = '';
                })
                .catch(error => {
                  // CATCH ERRORS (Network issues or errors thrown from !response.ok)
                  console.error('Form submission error:', error);
                  // Display the error message to the user
                  this.submitError = error.message || 'An unexpected error occurred. Please try again.';
                })
                .finally(() => {
                  // ALWAYS run this after fetch completes (success or error)
                  this.submitting = false; // Hide loading state
                });
              }
            }"
            x-on:submit.prevent="submitForm"
            novalidate { /* Disable browser's default validation as Alpine handles it */ }
          >
            {/* Name Input */}
            <div class="mb-4">
              <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Name</label>
              <input
                type="text"
                id="name"
                name="name" { /* Good practice to add name attribute */ }
                x-model="name"
                :disabled="submitting || submitted" { /* Disable when submitting or submitted */ }
                class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-hidden focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 disabled:opacity-50"
                placeholder="Your name"
                aria-describedby="name-error" { /* Link error message for accessibility */ }
                required { /* Indicate required field */ }
              />
              <p id="name-error" class="text-red-500 text-sm mt-1" x-show="errors.name" x-text="errors.name" x-cloak></p>
            </div>

            {/* Email Input */}
            <div class="mb-4">
              <label for="contact-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
              <input
                type="email"
                id="contact-email"
                name="email" { /* Good practice */ }
                x-model="email"
                :disabled="submitting || submitted"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-hidden focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 disabled:opacity-50"
                placeholder="Your email"
                aria-describedby="email-error"
                required
              />
              <p id="email-error" class="text-red-500 text-sm mt-1" x-show="errors.email" x-text="errors.email" x-cloak></p>
            </div>

            {/* Message Textarea */}
            <div class="mb-6">
              <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message</label>
              <textarea
                id="message"
                name="message" { /* Good practice */ }
                x-model="message"
                :disabled="submitting || submitted"
                rows="5"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-hidden focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 disabled:opacity-50"
                placeholder="Your message"
                aria-describedby="message-error"
                required
              ></textarea>
              <p id="message-error" class="text-red-500 text-sm mt-1" x-show="errors.message" x-text="errors.message" x-cloak></p>
            </div>

             {/* --- Display Area for General Submission Errors --- */}
            <div class="mb-4 p-3 text-center text-red-700 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-600 rounded-lg" x-show="submitError" x-cloak>
              <p x-text="submitError"></p>
            </div>


             {/* --- Submit Button (with loading state) --- */}
            <div x-show="!submitted"> { /* Hide button container when submitted */ }
              <button
                type="submit"
                class="w-full btn-primary disabled:opacity-70 disabled:cursor-not-allowed flex items-center justify-center"
                :disabled="submitting" { /* Disable button while submitting */ }
              >
                 {/* Show text or spinner based on 'submitting' state */}
                <span x-show="!submitting">Send Message</span>
                <span x-show="submitting" class="flex items-center">
                  <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Sending...
                </span>
              </button>
            </div>

             {/* --- Success Message Area (existing structure) --- */}
            <div class="text-center p-6 bg-primary-50 dark:bg-primary-900/30 rounded-lg border border-primary-200 dark:border-primary-700" x-show="submitted" x-cloak>
              <svg class="w-12 h-12 text-primary-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Message Sent!</h3>
              <p class="text-gray-600 dark:text-gray-300">
                Thank you for reaching out. We'll get back to you as soon as possible.
              </p>
               {/* Optional: Add a button to reset the form to allow another submission */}
              </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>